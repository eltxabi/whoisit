<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <title>Websocket client</title>
    <link rel="stylesheet" type="text/css" href="static/base.css">
    <script src="/static/jquery.min.js"></script>
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
    <script type="text/javascript" src="/static/gmap3.min.js"></script>
    <script type="text/javascript">
      
      var current_pos = new Array();
      var red_icon="http://maps.google.com/mapfiles/ms/icons/red-dot.png";  
      var pos_color = "red"; 
      var init_dist = 10; 
      var timeout; 
      var map,marker_position,circle_position;
 
      $(document).ready(init);
      
      function init() {
	  create_map(40,-6);
	              
 	  $(".send_data").bind( "click", sendData);
          $("#distance_range").change( function() {
                      $("#distance").text($(this).val()+" km");
	              current_pos.dist=parseFloat($("#distance_range").val());
                      send_position(current_pos);
	              savePositionCookies(current_pos);
                      draw_position(current_pos);
          });
	  
      };


//****************************websocket***************************

      function make_connection(){
console.log("make connection");
         $('#server').val("ws://" + window.location.host + "/websocket");
          if(!("WebSocket" in window)){  
              $('#status').append('<p><span style="color: red;">websockets are not supported </span></p>');
              $("#navigation").hide();  
          } else {
              $('#status').append('<p><span style="color: green;">websockets are supported </span></p>');
              connect();
          }; 
      }   

      function connect()
      {
          wsHost = $("#server").val()
          websocket = new WebSocket(wsHost);
          showScreen('<b>Connecting to: ' +  wsHost + '</b>'); 
          websocket.onopen = function(evt) { onOpen(evt) }; 
          websocket.onclose = function(evt) { onClose(evt) }; 
          websocket.onmessage = function(evt) { onMessage(evt) }; 
          websocket.onerror = function(evt) { onError(evt) }; 
      };  
      
      function disconnect() {
          websocket.close();
      };

      function onOpen(evt) { 
          showScreen('<span style="color: green;">CONNECTED </span>'); 
          $("#connected").fadeIn('slow');
          $("#content").fadeIn('slow');
          try { 
            select_position();
          } catch (excepcion) {
             console.log("excepcion: "+excepcion.message);  
          } 
         
      };  

      function onClose(evt) { 
          showScreen('<span style="color: red;">DISCONNECTED </span>');
          connect();
      };  

      function onMessage(evt) { 
        /*
	var json = JSON.parse(evt.data); 
	if ("message" in json) {
              showScreen('<span style="color: blue;">RESPONSE: ' + evt.data+ '</span>'); 
           }
        else if ("senders" in json) {
           //deleteCircles("blue");
           //deleteMarkers(blue_icon);
           showScreen('<span style="color: blue;">RESPONSE: ' + evt.data+ '</span>'); 
           senders = json["senders"];
	   for (var i in senders){
		//console.log("Hola "+json[i].loc.coordinates[0]+","+json[i].loc.coordinates[1]);
		drawMarker(senders[i].loc.coordinates[1],senders[i].loc.coordinates[0],senders[i].erl_pid,blue_icon);
		drawCircle(senders[i].loc.coordinates[1],senders[i].loc.coordinates[0],senders[i].dist,"blue")
	    }*/
          
	
      };  

      function onError(evt) {
          showScreen('<span style="color: red;">ERROR: ' + evt.data+ '</span>');
		
      };

      function sendData(){ 
	  if(websocket.readyState == websocket.OPEN){
              key = $(this).parent().attr("id");
              switch (key){
                 case "message":
                     value = $(this).siblings(":first").val();
		     json={};
		     json[key] =value;
		     send_json(json);
		     showScreen('sending message: ' + JSON.stringify(json)); 
                     break;
              }
          } else {
               showScreen('websocket is not connected'); 
          };
      };

      function send_position(current_pos){
	if(websocket.readyState == websocket.OPEN){
	     json={};
	     json["position"]={"lat":current_pos.lat,"lng":current_pos.lng,"dist":current_pos.dist};
             
	     send_json(json);
	     showScreen('sending position: ' + JSON.stringify(json));
	 } else {
               showScreen('websocket is not connected'); 
         }
      };

      function send_bounds(bounds){
console.log("current_pos: "+current_pos);
	if(websocket.readyState == websocket.OPEN){
	     json={};
	     json["bounds"]={"lat_NE":bounds.getNorthEast().lat(),"lng_NE":bounds.getNorthEast().lng(),"lat_NE":bounds.getNorthEast().lat(),"lat_SW":bounds.getSouthWest().lat(),"lng_SW":bounds.getSouthWest().lng()};
             send_json(json);
	     showScreen('sending bounds: ' + JSON.stringify(json));
	 } else {
               showScreen('websocket is not connected'); 
         }
      };

           
      function send_json(x){
          websocket.send(JSON.stringify(x));
      } 

//************************************interfa*********************

      function change_distance(){
         $("#distance").text($(this).val()+" km");
	 current_pos.dist=parseFloat($("#distance_range").val());
         send_position(current_pos);
	 savePositionCookies(current_pos);
         draw_position(current_pos);
      }

      function select_position(){
console.log('Entrmos en select position');
	if(navigator.geolocation){
        //intentamos obtener las coordenadas del usuario
	    navigator.geolocation.getCurrentPosition(function(objPosicion){
            //almacenamos en variables la longitud y latitud
	    current_pos.lng=objPosicion.coords.longitude;
 	    current_pos.lat=objPosicion.coords.latitude;
	    current_pos.dist=init_dist;
console.log('Su navegador Geolocation');
            if (lat!=NaN){
console.log('tenemos current position:'+current_pos.lat);
	      savePositionCookies(current_pos);	
	      draw_position(current_pos);
              console.log('posicion selecciond:'+current_pos.lat);
              send_position(current_pos); 
              change_bounds(); 
 	    }  
             
        },function(objError){
console.log('Error en select position');
            try {
	       getCookiesPosition();
               console.log('posicion selecciond:'+current_pos.lat);
              send_position(current_pos); 
              change_bounds(); 	
            } catch (excepcion) {
               throw excepcion; 
            }
            //manejamos los errores devueltos por Geolocation API
            switch(objError.code){
                //no se pudo obtener la informacion de la ubicacion
                case objError.POSITION_UNAVAILABLE:
                    console.log('La información de su posición no está disponible.');
                break;
                //timeout al intentar obtener las coordenadas
                case objError.TIMEOUT:
                    console.log('Tiempo de espera agotado.');
                break;
                //el usuario no desea mostrar la ubicacion
                case objError.PERMISSION_DENIED:
                    console.log('Acceso denegado.');
                break;
                //errores desconocidos
                case objError.UNKNOWN_ERROR:
                    console.log('Error desconocido.');
                break;
            }
        });
      }else{
console.log('Su navegador no soporta Geolocation API de HTML5');
            try {
	       getCookiesPosition();	
               console.log('posicion selecciond:'+current_pos.lat);
              send_position(current_pos); 
              change_bounds(); 
            } catch (excepcion) {
               throw excepcion; 
            }
		//console.log('Su navegador no soporta Geolocation API de HTML5');
	}
      }

      function getCookiesPosition(){
 console.log("getcookiesposition");
          current_pos.lat = parseFloat(getCookie("lat"));		
 	  current_pos.lng = parseFloat(getCookie("lng"));		
 	  current_pos.dist = parseFloat(getCookie("dist"));
	  if ((lat!=NaN) ){
	    draw_position(current_pos);
	  }else{
            miExcepcion = new Exception("Posicion no encontrada: Seleccionela manualmente");
            throw miExcepcionUsuario;  
	  }
      }

      function showScreen(txt) { 
          $('#output').prepend('<p>' + txt + '</p>');
      };


//************************************map************************
       function create_map(lati,long)
       {
          map = new google.maps.Map(document.getElementById('map'), {
              center: {lat: lati, lng: long},
              zoom: 8
          });


          map.addListener('click', function(e) {
             select_map_position(e.latLng.lat(),e.latLng.lng());
          });

          map.addListener('bounds_changed', function(event) {
             window.clearTimeout(timeout);
             timeout = window.setTimeout(function () {
console.log("bounds_chnged:");
             send_bounds(map.getBounds());
             }, 500); 
          });

          google.maps.event.addListenerOnce(map, 'tilesloaded', make_connection());

          
       }
       
       function change_bounds(){
           send_bounds(map.getBounds());
       }
 
       function select_map_position(lat,lng){
            $("#location").text("Location: Lat: "+lat+" Lon: "+lng);
		$("#lat").val(lat);
		$("#lng").val(lng);
		current_pos.lat=lat;
		current_pos.lng=lng;
		current_pos.dist=parseFloat($("#distance_range").val());
		savePositionCookies(current_pos);
                draw_position(current_pos);
		send_position(current_pos);
        } 

	function draw_position(current_pos){
                deletePosition();
		drawCircle(current_pos,pos_color);
                drawMarker(current_pos.lat,current_pos.lng,red_icon)
		center_map(current_pos.lat,current_pos.lng);
	}

        function drawMarker(lat,lng,icono){
               marker_position = new google.maps.Marker({
                  position:  {lat: lat, lng: lng},
                  map: map,
                  icon: icono
               });
        }

        function drawCircle(current_pos,color){
                circle_position = new google.maps.Circle({
                   strokeColor: color,
                   strokeOpacity: 0.8,
                   strokeWeight: 2,
                   fillColor: color,
                   fillOpacity: 0.35,
                   map: map,
                   center: new google.maps.LatLng(current_pos.lat,current_pos.lng),
                   radius: parseFloat(current_pos.dist)*1000
                });
	}

        function deletePosition(){
             if (!(typeof circle_position==='undefined' || circle_position===null)){
                   circle_position.setMap(null); 
                   marker_position.setMap(null);  
             } 
        }



        function center_map(lat,lng){
console.log("lat:"+lat);
                map.setCenter(new google.maps.LatLng(lat, lng));
	}

//**************************cookies******************************
	function savePositionCookies(current_pos){
		setCookie("lat",current_pos.lat,100);	
		setCookie("lng",current_pos.lng,100);
		setCookie("dist",current_pos.dist,100);
	}

	function setCookie(cname, cvalue, exdays) {
	    var d = new Date();
	    d.setTime(d.getTime() + (exdays*24*60*60*1000));
	    var expires = "expires="+d.toUTCString();
	    document.cookie = cname + "=" + cvalue + "; " + expires;
	} 


	function getCookie(cname) {
	    var name = cname + "=";
	    var ca = document.cookie.split(';');
	    for(var i=0; i<ca.length; i++) {
		var c = ca[i];
		while (c.charAt(0)==' ') c = c.substring(1);
		if (c.indexOf(name) == 0) return c.substring(name.length,c.length);
	    }
	    return "";
	} 	


//************************Exceptions*****************

	function Exception(message) {
	   this.message = message;
	}



    </script>
  </head>

  <body>
    <div id="map"></div>
    <div id="main">
      <div id="header">
        <h1>Websocket client</h1>
        <div id="status"></div>
      </div>


      <div id="navigation">
	 <p id="login">
    		<input type='text' value=""></input>
  		<button type="button" class="send_data">login</button>
        </p>
	<div id="position">
	      <div id="distance">1 km</div>
	      <input id="distance_range" type="range" min="1" max="100" step="1" value="1"></input> 
              <div id="location">Location:</div>
	      <input type="hidden" id="lat"></input> 
	      <input type="hidden" id="lng"></input>
              <button type="button" class="send_data">Send Position</button>
	</div>

        <p id="connecting">
    <input type='text' id="server" value=""></input>
  	<button type="button" onclick="toggle_connection()">connection</button>
        </p>
        <div id="connected">				
  	<p id="message">
  	  <input type='text' value=></input>
  	  <button type="button" class="send_data">send</button>
  	</p>
        </div>

        <div id="content">					
  	<button id="clear" onclick="clearScreen()" >Clear text</button>
  	<div id="output"></div>
        </div>

      </div>
    </div>
  </body>
</html> 
